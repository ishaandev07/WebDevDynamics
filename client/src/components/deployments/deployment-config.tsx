import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { 
  Settings, 
  Download, 
  Copy, 
  FileText, 
  Code2,
  Container,
  Terminal
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface DeploymentConfigProps {
  projectId: number;
  project?: {
    id: number;
    name: string;
    framework?: string;
    analysisResult?: any;
  };
}

export default function DeploymentConfig({ projectId, project }: DeploymentConfigProps) {
  const [activeTab, setActiveTab] = useState("replit");
  const { toast } = useToast();

  const { data: deploymentGuide } = useQuery({
    queryKey: [`/api/projects/${projectId}/deployment-guide`],
    enabled: !!projectId && !!project?.framework,
  });

  const analysis = project?.analysisResult 
    ? (typeof project.analysisResult === 'string' 
        ? JSON.parse(project.analysisResult) 
        : project.analysisResult)
    : null;

  const copyToClipboard = (text: string, name: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: `${name} configuration copied successfully`,
    });
  };

  const downloadFile = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateReplitConfig = () => {
    if (!analysis) return '';
    
    const config = {
      language: getLanguageForFramework(analysis.framework),
      run: analysis.startCommand || 'npm start',
      entrypoint: analysis.entryPoint || 'index.js',
      hidden: ['.config', 'node_modules', '.git', 'uploads', 'deployments'],
      compile: analysis.buildCommand || '',
      env: {
        NODE_ENV: 'production',
        PORT: '8080',
        ...(analysis.framework.includes('Python') ? { PYTHONUNBUFFERED: '1' } : {})
      }
    };

    return Object.entries(config)
      .filter(([_, value]) => value !== '')
      .map(([key, value]) => {
        if (typeof value === 'object') {
          return `${key} = ${JSON.stringify(value, null, 2)}`;
        }
        return `${key} = "${value}"`;
      })
      .join('\n');
  };

  const generateEnvFile = () => {
    const envVars = [
      'NODE_ENV=production',
      'PORT=8080',
    ];

    if (analysis?.framework.includes('React') || analysis?.framework.includes('Vue')) {
      envVars.push('CI=false', 'GENERATE_SOURCEMAP=false');
    }

    if (analysis?.framework.includes('Next.js')) {
      envVars.push('NEXT_TELEMETRY_DISABLED=1');
    }

    if (analysis?.framework.includes('Python')) {
      envVars.push('PYTHONUNBUFFERED=1', 'PYTHONPATH=.');
    }

    return envVars.join('\n');
  };

  const generateDockerfile = () => {
    if (!analysis) return '';

    if (analysis.framework.includes('Node') || analysis.framework.includes('React') || analysis.framework.includes('Express')) {
      return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

${analysis.buildCommand ? `RUN ${analysis.buildCommand}` : ''}

EXPOSE 8080

CMD [${analysis.startCommand.split(' ').map((part: string) => `"${part}"`).join(', ')}]`;

    } else if (analysis.framework.includes('Python') || analysis.framework.includes('FastAPI')) {
      return `FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8080

CMD [${analysis.startCommand.split(' ').map((part: string) => `"${part}"`).join(', ')}]`;

    } else {
      return `FROM alpine:latest

WORKDIR /app

COPY . .

RUN chmod +x deploy.sh

EXPOSE 8080

CMD ["./deploy.sh"]`;
    }
  };

  const generateDeployScript = () => {
    if (!analysis) return '';

    let script = '#!/bin/bash\n\n';
    script += '# Deployment script generated by Smart Deployment Dashboard\n\n';
    script += 'set -e\n\n';
    
    script += 'echo "Starting deployment process..."\n\n';

    if (analysis.buildCommand) {
      script += 'echo "Installing dependencies..."\n';
      if (analysis.framework.includes('Node')) {
        script += 'npm install\n\n';
      } else if (analysis.framework.includes('Python')) {
        script += 'pip install -r requirements.txt\n\n';
      }
      
      script += 'echo "Building application..."\n';
      script += `${analysis.buildCommand}\n\n`;
    }

    script += 'echo "Starting application..."\n';
    script += `exec ${analysis.startCommand}\n`;

    return script;
  };

  const generatePackageJson = () => {
    if (!analysis?.framework.includes('Node')) return '';

    const packageJson = {
      name: project?.name?.toLowerCase().replace(/\s+/g, '-') || 'deployment-app',
      version: '1.0.0',
      description: `Deployment package for ${project?.name || 'project'}`,
      main: analysis.entryPoint || 'index.js',
      scripts: {
        start: analysis.startCommand || 'node index.js',
        ...(analysis.buildCommand ? { build: analysis.buildCommand } : {}),
        dev: 'node index.js'
      },
      engines: {
        node: '>=18.0.0'
      },
      dependencies: analysis.dependencies?.reduce((acc: any, dep: string) => {
        acc[dep] = 'latest';
        return acc;
      }, {}) || {}
    };

    return JSON.stringify(packageJson, null, 2);
  };

  const getLanguageForFramework = (framework: string) => {
    if (framework.includes('Python')) return 'python3';
    if (framework.includes('Java')) return 'java';
    if (framework.includes('Node') || framework.includes('React') || framework.includes('Express')) return 'nodejs';
    return 'bash';
  };

  if (!project || !analysis) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Settings className="h-5 w-5" />
            <span>Deployment Configuration</span>
          </CardTitle>
          <CardDescription>
            Project analysis required to generate deployment configuration
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8 text-slate-500">
            Complete project analysis to view deployment configuration files
          </div>
        </CardContent>
      </Card>
    );
  }

  const configFiles = [
    {
      id: 'replit',
      name: '.replit',
      icon: <Code2 className="h-4 w-4" />,
      content: generateReplitConfig(),
      description: 'Replit configuration file for deployment'
    },
    {
      id: 'env',
      name: '.env',
      icon: <Settings className="h-4 w-4" />,
      content: generateEnvFile(),
      description: 'Environment variables configuration'
    },
    {
      id: 'dockerfile',
      name: 'Dockerfile',
      icon: <Container className="h-4 w-4" />,
      content: generateDockerfile(),
      description: 'Docker container configuration'
    },
    {
      id: 'deploy',
      name: 'deploy.sh',
      icon: <Terminal className="h-4 w-4" />,
      content: generateDeployScript(),
      description: 'Deployment script for manual deployment'
    },
    ...(analysis.framework.includes('Node') ? [{
      id: 'package',
      name: 'package.json',
      icon: <FileText className="h-4 w-4" />,
      content: generatePackageJson(),
      description: 'Node.js package configuration'
    }] : [])
  ];

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Settings className="h-5 w-5" />
            <CardTitle>Deployment Configuration</CardTitle>
            <Badge variant="outline">{analysis.framework}</Badge>
          </div>
          <Button
            variant="outline"
            onClick={() => {
              configFiles.forEach(file => {
                if (file.content) {
                  downloadFile(file.content, file.name);
                }
              });
              toast({
                title: "Configuration Downloaded",
                description: "All configuration files have been downloaded",
              });
            }}
          >
            <Download className="mr-2 h-4 w-4" />
            Download All
          </Button>
        </div>
        <CardDescription>
          Generated configuration files for deploying your {analysis.framework} project
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-5">
            {configFiles.map(file => (
              <TabsTrigger key={file.id} value={file.id} className="flex items-center space-x-1">
                {file.icon}
                <span className="hidden sm:inline">{file.name}</span>
              </TabsTrigger>
            ))}
          </TabsList>
          
          {configFiles.map(file => (
            <TabsContent key={file.id} value={file.id} className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-slate-900">{file.name}</h3>
                  <p className="text-sm text-slate-600">{file.description}</p>
                </div>
                <div className="flex space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(file.content, file.name)}
                  >
                    <Copy className="mr-2 h-3 w-3" />
                    Copy
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => downloadFile(file.content, file.name)}
                  >
                    <Download className="mr-2 h-3 w-3" />
                    Download
                  </Button>
                </div>
              </div>
              
              <div className="bg-slate-950 rounded-lg p-4 overflow-x-auto">
                <pre className="text-sm text-slate-300 font-mono whitespace-pre-wrap">
                  {file.content || 'No content available'}
                </pre>
              </div>
            </TabsContent>
          ))}
        </Tabs>

        {deploymentGuide?.guide && (
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-900 mb-2">Deployment Guide</h4>
            <div className="text-sm text-blue-800 whitespace-pre-wrap">
              {deploymentGuide.guide}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}